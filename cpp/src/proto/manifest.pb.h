// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: manifest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_manifest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_manifest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "schema_arrow.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_manifest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_manifest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_manifest_2eproto;
namespace manifest_proto {
class Blob;
class BlobDefaultTypeInternal;
extern BlobDefaultTypeInternal _Blob_default_instance_;
class Fragment;
class FragmentDefaultTypeInternal;
extern FragmentDefaultTypeInternal _Fragment_default_instance_;
class Manifest;
class ManifestDefaultTypeInternal;
extern ManifestDefaultTypeInternal _Manifest_default_instance_;
class Options;
class OptionsDefaultTypeInternal;
extern OptionsDefaultTypeInternal _Options_default_instance_;
}  // namespace manifest_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::manifest_proto::Blob* Arena::CreateMaybeMessage<::manifest_proto::Blob>(Arena*);
template<> ::manifest_proto::Fragment* Arena::CreateMaybeMessage<::manifest_proto::Fragment>(Arena*);
template<> ::manifest_proto::Manifest* Arena::CreateMaybeMessage<::manifest_proto::Manifest>(Arena*);
template<> ::manifest_proto::Options* Arena::CreateMaybeMessage<::manifest_proto::Options>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace manifest_proto {

// ===================================================================

class Options PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:manifest_proto.Options) */ {
 public:
  inline Options() : Options(nullptr) {};
  virtual ~Options();

  Options(const Options& from);
  Options(Options&& from) noexcept
    : Options() {
    *this = ::std::move(from);
  }

  inline Options& operator=(const Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline Options& operator=(Options&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Options& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Options* internal_default_instance() {
    return reinterpret_cast<const Options*>(
               &_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Options& a, Options& b) {
    a.Swap(&b);
  }
  inline void Swap(Options* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Options* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Options* New() const final {
    return CreateMaybeMessage<Options>(nullptr);
  }

  Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Options& from);
  void MergeFrom(const Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "manifest_proto.Options";
  }
  protected:
  explicit Options(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_manifest_2eproto);
    return ::descriptor_table_manifest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
  };
  // string uri = 1;
  void clear_uri();
  const std::string& uri() const;
  void set_uri(const std::string& value);
  void set_uri(std::string&& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  std::string* mutable_uri();
  std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uri();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uri(
      std::string* uri);
  private:
  const std::string& _internal_uri() const;
  void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // @@protoc_insertion_point(class_scope:manifest_proto.Options)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_manifest_2eproto;
};
// -------------------------------------------------------------------

class Manifest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:manifest_proto.Manifest) */ {
 public:
  inline Manifest() : Manifest(nullptr) {};
  virtual ~Manifest();

  Manifest(const Manifest& from);
  Manifest(Manifest&& from) noexcept
    : Manifest() {
    *this = ::std::move(from);
  }

  inline Manifest& operator=(const Manifest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Manifest& operator=(Manifest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Manifest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Manifest* internal_default_instance() {
    return reinterpret_cast<const Manifest*>(
               &_Manifest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Manifest& a, Manifest& b) {
    a.Swap(&b);
  }
  inline void Swap(Manifest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Manifest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Manifest* New() const final {
    return CreateMaybeMessage<Manifest>(nullptr);
  }

  Manifest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Manifest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Manifest& from);
  void MergeFrom(const Manifest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Manifest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "manifest_proto.Manifest";
  }
  protected:
  explicit Manifest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_manifest_2eproto);
    return ::descriptor_table_manifest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarFragmentsFieldNumber = 4,
    kVectorFragmentsFieldNumber = 5,
    kDeleteFragmentsFieldNumber = 6,
    kBlobsFieldNumber = 7,
    kOptionsFieldNumber = 2,
    kSchemaFieldNumber = 3,
    kVersionFieldNumber = 1,
  };
  // repeated .manifest_proto.Fragment scalar_fragments = 4;
  int scalar_fragments_size() const;
  private:
  int _internal_scalar_fragments_size() const;
  public:
  void clear_scalar_fragments();
  ::manifest_proto::Fragment* mutable_scalar_fragments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::manifest_proto::Fragment >*
      mutable_scalar_fragments();
  private:
  const ::manifest_proto::Fragment& _internal_scalar_fragments(int index) const;
  ::manifest_proto::Fragment* _internal_add_scalar_fragments();
  public:
  const ::manifest_proto::Fragment& scalar_fragments(int index) const;
  ::manifest_proto::Fragment* add_scalar_fragments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::manifest_proto::Fragment >&
      scalar_fragments() const;

  // repeated .manifest_proto.Fragment vector_fragments = 5;
  int vector_fragments_size() const;
  private:
  int _internal_vector_fragments_size() const;
  public:
  void clear_vector_fragments();
  ::manifest_proto::Fragment* mutable_vector_fragments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::manifest_proto::Fragment >*
      mutable_vector_fragments();
  private:
  const ::manifest_proto::Fragment& _internal_vector_fragments(int index) const;
  ::manifest_proto::Fragment* _internal_add_vector_fragments();
  public:
  const ::manifest_proto::Fragment& vector_fragments(int index) const;
  ::manifest_proto::Fragment* add_vector_fragments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::manifest_proto::Fragment >&
      vector_fragments() const;

  // repeated .manifest_proto.Fragment delete_fragments = 6;
  int delete_fragments_size() const;
  private:
  int _internal_delete_fragments_size() const;
  public:
  void clear_delete_fragments();
  ::manifest_proto::Fragment* mutable_delete_fragments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::manifest_proto::Fragment >*
      mutable_delete_fragments();
  private:
  const ::manifest_proto::Fragment& _internal_delete_fragments(int index) const;
  ::manifest_proto::Fragment* _internal_add_delete_fragments();
  public:
  const ::manifest_proto::Fragment& delete_fragments(int index) const;
  ::manifest_proto::Fragment* add_delete_fragments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::manifest_proto::Fragment >&
      delete_fragments() const;

  // repeated .manifest_proto.Blob blobs = 7;
  int blobs_size() const;
  private:
  int _internal_blobs_size() const;
  public:
  void clear_blobs();
  ::manifest_proto::Blob* mutable_blobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::manifest_proto::Blob >*
      mutable_blobs();
  private:
  const ::manifest_proto::Blob& _internal_blobs(int index) const;
  ::manifest_proto::Blob* _internal_add_blobs();
  public:
  const ::manifest_proto::Blob& blobs(int index) const;
  ::manifest_proto::Blob* add_blobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::manifest_proto::Blob >&
      blobs() const;

  // .manifest_proto.Options options = 2;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::manifest_proto::Options& options() const;
  ::manifest_proto::Options* release_options();
  ::manifest_proto::Options* mutable_options();
  void set_allocated_options(::manifest_proto::Options* options);
  private:
  const ::manifest_proto::Options& _internal_options() const;
  ::manifest_proto::Options* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::manifest_proto::Options* options);
  ::manifest_proto::Options* unsafe_arena_release_options();

  // .schema_proto.Schema schema = 3;
  bool has_schema() const;
  private:
  bool _internal_has_schema() const;
  public:
  void clear_schema();
  const ::schema_proto::Schema& schema() const;
  ::schema_proto::Schema* release_schema();
  ::schema_proto::Schema* mutable_schema();
  void set_allocated_schema(::schema_proto::Schema* schema);
  private:
  const ::schema_proto::Schema& _internal_schema() const;
  ::schema_proto::Schema* _internal_mutable_schema();
  public:
  void unsafe_arena_set_allocated_schema(
      ::schema_proto::Schema* schema);
  ::schema_proto::Schema* unsafe_arena_release_schema();

  // int64 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:manifest_proto.Manifest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::manifest_proto::Fragment > scalar_fragments_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::manifest_proto::Fragment > vector_fragments_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::manifest_proto::Fragment > delete_fragments_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::manifest_proto::Blob > blobs_;
  ::manifest_proto::Options* options_;
  ::schema_proto::Schema* schema_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_manifest_2eproto;
};
// -------------------------------------------------------------------

class Fragment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:manifest_proto.Fragment) */ {
 public:
  inline Fragment() : Fragment(nullptr) {};
  virtual ~Fragment();

  Fragment(const Fragment& from);
  Fragment(Fragment&& from) noexcept
    : Fragment() {
    *this = ::std::move(from);
  }

  inline Fragment& operator=(const Fragment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fragment& operator=(Fragment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fragment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fragment* internal_default_instance() {
    return reinterpret_cast<const Fragment*>(
               &_Fragment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Fragment& a, Fragment& b) {
    a.Swap(&b);
  }
  inline void Swap(Fragment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fragment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fragment* New() const final {
    return CreateMaybeMessage<Fragment>(nullptr);
  }

  Fragment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fragment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fragment& from);
  void MergeFrom(const Fragment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fragment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "manifest_proto.Fragment";
  }
  protected:
  explicit Fragment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_manifest_2eproto);
    return ::descriptor_table_manifest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated string files = 2;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  const std::string& files(int index) const;
  std::string* mutable_files(int index);
  void set_files(int index, const std::string& value);
  void set_files(int index, std::string&& value);
  void set_files(int index, const char* value);
  void set_files(int index, const char* value, size_t size);
  std::string* add_files();
  void add_files(const std::string& value);
  void add_files(std::string&& value);
  void add_files(const char* value);
  void add_files(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_files();
  private:
  const std::string& _internal_files(int index) const;
  std::string* _internal_add_files();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:manifest_proto.Fragment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> files_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_manifest_2eproto;
};
// -------------------------------------------------------------------

class Blob PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:manifest_proto.Blob) */ {
 public:
  inline Blob() : Blob(nullptr) {};
  virtual ~Blob();

  Blob(const Blob& from);
  Blob(Blob&& from) noexcept
    : Blob() {
    *this = ::std::move(from);
  }

  inline Blob& operator=(const Blob& from) {
    CopyFrom(from);
    return *this;
  }
  inline Blob& operator=(Blob&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Blob& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Blob* internal_default_instance() {
    return reinterpret_cast<const Blob*>(
               &_Blob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Blob& a, Blob& b) {
    a.Swap(&b);
  }
  inline void Swap(Blob* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Blob* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Blob* New() const final {
    return CreateMaybeMessage<Blob>(nullptr);
  }

  Blob* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Blob>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Blob& from);
  void MergeFrom(const Blob& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Blob* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "manifest_proto.Blob";
  }
  protected:
  explicit Blob(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_manifest_2eproto);
    return ::descriptor_table_manifest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFileFieldNumber = 3,
    kSizeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string file = 3;
  void clear_file();
  const std::string& file() const;
  void set_file(const std::string& value);
  void set_file(std::string&& value);
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  std::string* mutable_file();
  std::string* release_file();
  void set_allocated_file(std::string* file);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_file();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_file(
      std::string* file);
  private:
  const std::string& _internal_file() const;
  void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // int64 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:manifest_proto.Blob)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_manifest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Options

// string uri = 1;
inline void Options::clear_uri() {
  uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Options::uri() const {
  // @@protoc_insertion_point(field_get:manifest_proto.Options.uri)
  return _internal_uri();
}
inline void Options::set_uri(const std::string& value) {
  _internal_set_uri(value);
  // @@protoc_insertion_point(field_set:manifest_proto.Options.uri)
}
inline std::string* Options::mutable_uri() {
  // @@protoc_insertion_point(field_mutable:manifest_proto.Options.uri)
  return _internal_mutable_uri();
}
inline const std::string& Options::_internal_uri() const {
  return uri_.Get();
}
inline void Options::_internal_set_uri(const std::string& value) {
  
  uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Options::set_uri(std::string&& value) {
  
  uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:manifest_proto.Options.uri)
}
inline void Options::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:manifest_proto.Options.uri)
}
inline void Options::set_uri(const char* value,
    size_t size) {
  
  uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:manifest_proto.Options.uri)
}
inline std::string* Options::_internal_mutable_uri() {
  
  return uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Options::release_uri() {
  // @@protoc_insertion_point(field_release:manifest_proto.Options.uri)
  return uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Options::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:manifest_proto.Options.uri)
}
inline std::string* Options::unsafe_arena_release_uri() {
  // @@protoc_insertion_point(field_unsafe_arena_release:manifest_proto.Options.uri)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return uri_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Options::unsafe_arena_set_allocated_uri(
    std::string* uri) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uri, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:manifest_proto.Options.uri)
}

// -------------------------------------------------------------------

// Manifest

// int64 version = 1;
inline void Manifest::clear_version() {
  version_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Manifest::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Manifest::version() const {
  // @@protoc_insertion_point(field_get:manifest_proto.Manifest.version)
  return _internal_version();
}
inline void Manifest::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  version_ = value;
}
inline void Manifest::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:manifest_proto.Manifest.version)
}

// .manifest_proto.Options options = 2;
inline bool Manifest::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool Manifest::has_options() const {
  return _internal_has_options();
}
inline void Manifest::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::manifest_proto::Options& Manifest::_internal_options() const {
  const ::manifest_proto::Options* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::manifest_proto::Options*>(
      &::manifest_proto::_Options_default_instance_);
}
inline const ::manifest_proto::Options& Manifest::options() const {
  // @@protoc_insertion_point(field_get:manifest_proto.Manifest.options)
  return _internal_options();
}
inline void Manifest::unsafe_arena_set_allocated_options(
    ::manifest_proto::Options* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:manifest_proto.Manifest.options)
}
inline ::manifest_proto::Options* Manifest::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::manifest_proto::Options* Manifest::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:manifest_proto.Manifest.options)
  
  ::manifest_proto::Options* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::manifest_proto::Options* Manifest::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::manifest_proto::Options>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::manifest_proto::Options* Manifest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:manifest_proto.Manifest.options)
  return _internal_mutable_options();
}
inline void Manifest::set_allocated_options(::manifest_proto::Options* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:manifest_proto.Manifest.options)
}

// .schema_proto.Schema schema = 3;
inline bool Manifest::_internal_has_schema() const {
  return this != internal_default_instance() && schema_ != nullptr;
}
inline bool Manifest::has_schema() const {
  return _internal_has_schema();
}
inline const ::schema_proto::Schema& Manifest::_internal_schema() const {
  const ::schema_proto::Schema* p = schema_;
  return p != nullptr ? *p : *reinterpret_cast<const ::schema_proto::Schema*>(
      &::schema_proto::_Schema_default_instance_);
}
inline const ::schema_proto::Schema& Manifest::schema() const {
  // @@protoc_insertion_point(field_get:manifest_proto.Manifest.schema)
  return _internal_schema();
}
inline void Manifest::unsafe_arena_set_allocated_schema(
    ::schema_proto::Schema* schema) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(schema_);
  }
  schema_ = schema;
  if (schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:manifest_proto.Manifest.schema)
}
inline ::schema_proto::Schema* Manifest::release_schema() {
  auto temp = unsafe_arena_release_schema();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::schema_proto::Schema* Manifest::unsafe_arena_release_schema() {
  // @@protoc_insertion_point(field_release:manifest_proto.Manifest.schema)
  
  ::schema_proto::Schema* temp = schema_;
  schema_ = nullptr;
  return temp;
}
inline ::schema_proto::Schema* Manifest::_internal_mutable_schema() {
  
  if (schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::schema_proto::Schema>(GetArena());
    schema_ = p;
  }
  return schema_;
}
inline ::schema_proto::Schema* Manifest::mutable_schema() {
  // @@protoc_insertion_point(field_mutable:manifest_proto.Manifest.schema)
  return _internal_mutable_schema();
}
inline void Manifest::set_allocated_schema(::schema_proto::Schema* schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(schema_);
  }
  if (schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(schema)->GetArena();
    if (message_arena != submessage_arena) {
      schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema, submessage_arena);
    }
    
  } else {
    
  }
  schema_ = schema;
  // @@protoc_insertion_point(field_set_allocated:manifest_proto.Manifest.schema)
}

// repeated .manifest_proto.Fragment scalar_fragments = 4;
inline int Manifest::_internal_scalar_fragments_size() const {
  return scalar_fragments_.size();
}
inline int Manifest::scalar_fragments_size() const {
  return _internal_scalar_fragments_size();
}
inline void Manifest::clear_scalar_fragments() {
  scalar_fragments_.Clear();
}
inline ::manifest_proto::Fragment* Manifest::mutable_scalar_fragments(int index) {
  // @@protoc_insertion_point(field_mutable:manifest_proto.Manifest.scalar_fragments)
  return scalar_fragments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::manifest_proto::Fragment >*
Manifest::mutable_scalar_fragments() {
  // @@protoc_insertion_point(field_mutable_list:manifest_proto.Manifest.scalar_fragments)
  return &scalar_fragments_;
}
inline const ::manifest_proto::Fragment& Manifest::_internal_scalar_fragments(int index) const {
  return scalar_fragments_.Get(index);
}
inline const ::manifest_proto::Fragment& Manifest::scalar_fragments(int index) const {
  // @@protoc_insertion_point(field_get:manifest_proto.Manifest.scalar_fragments)
  return _internal_scalar_fragments(index);
}
inline ::manifest_proto::Fragment* Manifest::_internal_add_scalar_fragments() {
  return scalar_fragments_.Add();
}
inline ::manifest_proto::Fragment* Manifest::add_scalar_fragments() {
  // @@protoc_insertion_point(field_add:manifest_proto.Manifest.scalar_fragments)
  return _internal_add_scalar_fragments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::manifest_proto::Fragment >&
Manifest::scalar_fragments() const {
  // @@protoc_insertion_point(field_list:manifest_proto.Manifest.scalar_fragments)
  return scalar_fragments_;
}

// repeated .manifest_proto.Fragment vector_fragments = 5;
inline int Manifest::_internal_vector_fragments_size() const {
  return vector_fragments_.size();
}
inline int Manifest::vector_fragments_size() const {
  return _internal_vector_fragments_size();
}
inline void Manifest::clear_vector_fragments() {
  vector_fragments_.Clear();
}
inline ::manifest_proto::Fragment* Manifest::mutable_vector_fragments(int index) {
  // @@protoc_insertion_point(field_mutable:manifest_proto.Manifest.vector_fragments)
  return vector_fragments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::manifest_proto::Fragment >*
Manifest::mutable_vector_fragments() {
  // @@protoc_insertion_point(field_mutable_list:manifest_proto.Manifest.vector_fragments)
  return &vector_fragments_;
}
inline const ::manifest_proto::Fragment& Manifest::_internal_vector_fragments(int index) const {
  return vector_fragments_.Get(index);
}
inline const ::manifest_proto::Fragment& Manifest::vector_fragments(int index) const {
  // @@protoc_insertion_point(field_get:manifest_proto.Manifest.vector_fragments)
  return _internal_vector_fragments(index);
}
inline ::manifest_proto::Fragment* Manifest::_internal_add_vector_fragments() {
  return vector_fragments_.Add();
}
inline ::manifest_proto::Fragment* Manifest::add_vector_fragments() {
  // @@protoc_insertion_point(field_add:manifest_proto.Manifest.vector_fragments)
  return _internal_add_vector_fragments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::manifest_proto::Fragment >&
Manifest::vector_fragments() const {
  // @@protoc_insertion_point(field_list:manifest_proto.Manifest.vector_fragments)
  return vector_fragments_;
}

// repeated .manifest_proto.Fragment delete_fragments = 6;
inline int Manifest::_internal_delete_fragments_size() const {
  return delete_fragments_.size();
}
inline int Manifest::delete_fragments_size() const {
  return _internal_delete_fragments_size();
}
inline void Manifest::clear_delete_fragments() {
  delete_fragments_.Clear();
}
inline ::manifest_proto::Fragment* Manifest::mutable_delete_fragments(int index) {
  // @@protoc_insertion_point(field_mutable:manifest_proto.Manifest.delete_fragments)
  return delete_fragments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::manifest_proto::Fragment >*
Manifest::mutable_delete_fragments() {
  // @@protoc_insertion_point(field_mutable_list:manifest_proto.Manifest.delete_fragments)
  return &delete_fragments_;
}
inline const ::manifest_proto::Fragment& Manifest::_internal_delete_fragments(int index) const {
  return delete_fragments_.Get(index);
}
inline const ::manifest_proto::Fragment& Manifest::delete_fragments(int index) const {
  // @@protoc_insertion_point(field_get:manifest_proto.Manifest.delete_fragments)
  return _internal_delete_fragments(index);
}
inline ::manifest_proto::Fragment* Manifest::_internal_add_delete_fragments() {
  return delete_fragments_.Add();
}
inline ::manifest_proto::Fragment* Manifest::add_delete_fragments() {
  // @@protoc_insertion_point(field_add:manifest_proto.Manifest.delete_fragments)
  return _internal_add_delete_fragments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::manifest_proto::Fragment >&
Manifest::delete_fragments() const {
  // @@protoc_insertion_point(field_list:manifest_proto.Manifest.delete_fragments)
  return delete_fragments_;
}

// repeated .manifest_proto.Blob blobs = 7;
inline int Manifest::_internal_blobs_size() const {
  return blobs_.size();
}
inline int Manifest::blobs_size() const {
  return _internal_blobs_size();
}
inline void Manifest::clear_blobs() {
  blobs_.Clear();
}
inline ::manifest_proto::Blob* Manifest::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:manifest_proto.Manifest.blobs)
  return blobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::manifest_proto::Blob >*
Manifest::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:manifest_proto.Manifest.blobs)
  return &blobs_;
}
inline const ::manifest_proto::Blob& Manifest::_internal_blobs(int index) const {
  return blobs_.Get(index);
}
inline const ::manifest_proto::Blob& Manifest::blobs(int index) const {
  // @@protoc_insertion_point(field_get:manifest_proto.Manifest.blobs)
  return _internal_blobs(index);
}
inline ::manifest_proto::Blob* Manifest::_internal_add_blobs() {
  return blobs_.Add();
}
inline ::manifest_proto::Blob* Manifest::add_blobs() {
  // @@protoc_insertion_point(field_add:manifest_proto.Manifest.blobs)
  return _internal_add_blobs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::manifest_proto::Blob >&
Manifest::blobs() const {
  // @@protoc_insertion_point(field_list:manifest_proto.Manifest.blobs)
  return blobs_;
}

// -------------------------------------------------------------------

// Fragment

// int64 id = 1;
inline void Fragment::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Fragment::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Fragment::id() const {
  // @@protoc_insertion_point(field_get:manifest_proto.Fragment.id)
  return _internal_id();
}
inline void Fragment::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Fragment::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:manifest_proto.Fragment.id)
}

// repeated string files = 2;
inline int Fragment::_internal_files_size() const {
  return files_.size();
}
inline int Fragment::files_size() const {
  return _internal_files_size();
}
inline void Fragment::clear_files() {
  files_.Clear();
}
inline std::string* Fragment::add_files() {
  // @@protoc_insertion_point(field_add_mutable:manifest_proto.Fragment.files)
  return _internal_add_files();
}
inline const std::string& Fragment::_internal_files(int index) const {
  return files_.Get(index);
}
inline const std::string& Fragment::files(int index) const {
  // @@protoc_insertion_point(field_get:manifest_proto.Fragment.files)
  return _internal_files(index);
}
inline std::string* Fragment::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:manifest_proto.Fragment.files)
  return files_.Mutable(index);
}
inline void Fragment::set_files(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:manifest_proto.Fragment.files)
  files_.Mutable(index)->assign(value);
}
inline void Fragment::set_files(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:manifest_proto.Fragment.files)
  files_.Mutable(index)->assign(std::move(value));
}
inline void Fragment::set_files(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:manifest_proto.Fragment.files)
}
inline void Fragment::set_files(int index, const char* value, size_t size) {
  files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:manifest_proto.Fragment.files)
}
inline std::string* Fragment::_internal_add_files() {
  return files_.Add();
}
inline void Fragment::add_files(const std::string& value) {
  files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:manifest_proto.Fragment.files)
}
inline void Fragment::add_files(std::string&& value) {
  files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:manifest_proto.Fragment.files)
}
inline void Fragment::add_files(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:manifest_proto.Fragment.files)
}
inline void Fragment::add_files(const char* value, size_t size) {
  files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:manifest_proto.Fragment.files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Fragment::files() const {
  // @@protoc_insertion_point(field_list:manifest_proto.Fragment.files)
  return files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Fragment::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:manifest_proto.Fragment.files)
  return &files_;
}

// -------------------------------------------------------------------

// Blob

// string name = 1;
inline void Blob::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Blob::name() const {
  // @@protoc_insertion_point(field_get:manifest_proto.Blob.name)
  return _internal_name();
}
inline void Blob::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:manifest_proto.Blob.name)
}
inline std::string* Blob::mutable_name() {
  // @@protoc_insertion_point(field_mutable:manifest_proto.Blob.name)
  return _internal_mutable_name();
}
inline const std::string& Blob::_internal_name() const {
  return name_.Get();
}
inline void Blob::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Blob::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:manifest_proto.Blob.name)
}
inline void Blob::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:manifest_proto.Blob.name)
}
inline void Blob::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:manifest_proto.Blob.name)
}
inline std::string* Blob::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Blob::release_name() {
  // @@protoc_insertion_point(field_release:manifest_proto.Blob.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Blob::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:manifest_proto.Blob.name)
}
inline std::string* Blob::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:manifest_proto.Blob.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Blob::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:manifest_proto.Blob.name)
}

// int64 size = 2;
inline void Blob::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Blob::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Blob::size() const {
  // @@protoc_insertion_point(field_get:manifest_proto.Blob.size)
  return _internal_size();
}
inline void Blob::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void Blob::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:manifest_proto.Blob.size)
}

// string file = 3;
inline void Blob::clear_file() {
  file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Blob::file() const {
  // @@protoc_insertion_point(field_get:manifest_proto.Blob.file)
  return _internal_file();
}
inline void Blob::set_file(const std::string& value) {
  _internal_set_file(value);
  // @@protoc_insertion_point(field_set:manifest_proto.Blob.file)
}
inline std::string* Blob::mutable_file() {
  // @@protoc_insertion_point(field_mutable:manifest_proto.Blob.file)
  return _internal_mutable_file();
}
inline const std::string& Blob::_internal_file() const {
  return file_.Get();
}
inline void Blob::_internal_set_file(const std::string& value) {
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Blob::set_file(std::string&& value) {
  
  file_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:manifest_proto.Blob.file)
}
inline void Blob::set_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:manifest_proto.Blob.file)
}
inline void Blob::set_file(const char* value,
    size_t size) {
  
  file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:manifest_proto.Blob.file)
}
inline std::string* Blob::_internal_mutable_file() {
  
  return file_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Blob::release_file() {
  // @@protoc_insertion_point(field_release:manifest_proto.Blob.file)
  return file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Blob::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:manifest_proto.Blob.file)
}
inline std::string* Blob::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:manifest_proto.Blob.file)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return file_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Blob::unsafe_arena_set_allocated_file(
    std::string* file) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (file != nullptr) {
    
  } else {
    
  }
  file_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      file, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:manifest_proto.Blob.file)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace manifest_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_manifest_2eproto
